
import org.apache.tools.ant.filters.*


apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'groovy'
apply plugin:  "maven"

group = "edu.holycross.shot"
version = "0.2.0"

// for jettyRunWar:
httpPort = 4040
stopPort = 9451
stopKey = 'foo'

repositories {
    mavenCentral()
    // for the CITE library
    maven {
        url "http://beta.hpcc.uh.edu/nexus/content/repositories/releases"
    }
}

configurations {
    ctskit {
        description = 'Manage external ctskit material'
        transitive = true
    }
}


dependencies {
    compile group: 'commons-io', name: 'commons-io', version: commonsioversion
    compile group: 'log4j', name: 'log4j', version: log4jversion, ext: 'jar'

    groovy  group: 'org.codehaus.groovy', name: 'groovy-all', version: groovyversion
    groovy group: 'edu.harvard.chs', name: 'cite', version: citeversion

    testCompile group: 'junit', name: 'junit', version: junitversion

    ctskit group: 'org.homermultitext', name: 'hmt-html-ctskit', version: ctskitversion, ext: 'zip'

}


task sourcesZip(type: Zip, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task docsZip(type: Zip, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from groovydoc.destinationDir
    description = 'Builds zip file of java/groovy docs'

}

artifacts {
    archives docsZip
    archives sourcesZip
}


uploadArchives {
    repositories.mavenDeployer {
        repository(url: nexusRepo) {                   
            authentication (userName: nexusUser, password: nexusPassword)
        }
    }
}

test {
    /* In gradle, properties are normally wiped clean for tests.
    This passes the project property apiKey to tests as a System property
    */
    systemProperty  "apiKey", apiKey
}




task installCtsKit {
    description = "Installs externally supplied html-ctskit in build location."
    doLast {
        // There is only one file in the ctskit configuration:  
        // the zipped package with css, js and xsl.  
        def fileList = configurations.ctskit.getAsFileTree().getFiles().toArray()
        def zipFile = fileList[0]
        // Use gradle FileTree to copy zip contents to build area:
        FileTree kitFiles = zipTree(zipFile)
        copy {
            from  kitFiles
            into "${buildDir}/warsrc/ctskit"
            include "**/**.css"
            include "**/**.js"
            include "**/**.xsl"
        }
    }
}



task setUpWar(type: Copy, dependsOn : installCtsKit) {
    description = "Assembles all material for war file in build directory."
    from "src/main/webapp"
    into "${buildDir}/warsrc"
}

war.dependsOn setUpWar

war {
    from "${buildDir}/warsrc"
    filter(ReplaceTokens, tokens: ['apiKey': apiKey])
}
