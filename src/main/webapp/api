// HORRIFIC error in groovy:  parameter named 'request'
// is lost!

import edu.holycross.shot.citecoll.CollectionService
import edu.harvard.chs.cite.CiteUrn
import groovy.xml.MarkupBuilder

response.setContentType("text/xml; charset=UTF-8")
request.setCharacterEncoding("UTF-8")

String apiKey = "@apiKey@"


def getCapsFile = {
    File capsFile
    String capsFileName = "capabilities.xml"
    if (params['config']) {
        capsFileName = params['config']
    }
    try {
        capsFile = new File(context.getRealPath("/configs") + "/" + capsFileName )
        capsFile
    } catch (Exception e) {
        null
    }
}

boolean urnSyntaxOk(String urnStr) {
    try {
        CiteUrn urn = new CiteUrn (urnStr)
        return true
    } catch (Exception e) {
        return false
    }
}

def errorMsg =  { msg ->
    StringWriter writer = new StringWriter()
    MarkupBuilder xml = new MarkupBuilder(writer)
    xml.CiteError {
        errorCode("1")
        description("${msg}")
    }
    println writer.toString()    
}


String checkRequest() {
    params.keySet().each { paramKey ->
        def paramList = params[paramKey]
        if (paramList.size() > 1) {
            return "Bad parameter set:  duplicated parameter ${paramKey}"
        }
    }

    // Must include a 'req' parameter:
    if (!params['req']) {
        return  "No 'req' parameter given."
    }
    if (params['req'] == "GetCapabilities") {
        // no other params needed
        return "OK"
    }

    switch (params['req']) {

        // These requests require a URN parameter:
        // GetValidReff
        case "GetCollectionSize":
        case "GetObject":
        case "GetObjectPlus":
        case "GetPrev":
        case "GetNext":
        case "GetPrevNextUrn":
        case "GetLast":
        case "GetFirst":
                if (params['urn']) {
                if (!urnSyntaxOk(params['urn'])) {
                    return "Invalid urn syntax '" + params['urn'] + "'."
                }
                return "OK"
        }
        break

        default:
            return "Unrecognized or unimplemented request '" +  params['req'] + "'"
        break
    }
}

// SCRIPT:
// 1. Validate request form.
def checkReq = checkRequest()
if (!(checkReq == "OK")) {
    errorMsg(checkReq)
} else {
    // CHECK FOR caps file apram
    // 
    File caps = getCapsFile()
    if (! caps) { 
        errorMsg("Could not find capabilities file ${params['config']}")
    } else {
        CollectionService cs = new CollectionService(getCapsFile(), apiKey)


    def citeReq = params['req']
    switch (citeReq) {
        case 'GetCapabilities':
            println cs.getCapsReply()
        break

        case 'GetObjectPlus':
            println cs.getObjectPlusReply(params['urn']) 
        break

        case 'GetObject':
            println cs.getObjReply(params['urn']) 
        break

        case 'GetFirst':
            println cs.getFirstReply(params['urn'])
        break


        case 'GetLast':
            println cs.getLastReply(params['urn'])
        break

        case 'GetCollectionSize':
            println cs.getSizeReply(params['urn'])
        break


        case 'GetNext':
            println cs.getNextReply(params['urn'])
        break

        case 'GetPrev':
            println cs.getPrevReply(params['urn'])
        break


        case 'GetPrevNextUrn':
            println cs.getPrevNextReply(params['urn'])
        break

        /*
        case 'OrderedBy':
            return cs.orderedBy(params['urn'])
        break
        */

        case 'GetValidIds':
            return getValidReffReply(params['urn'])
        break

    }
}
}

