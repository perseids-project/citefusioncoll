// HORRIFIC error in groovy:  parameter named 'request'
// is lost!


/*
Four required parameters:
required collection urn param
required img urn param
required prop param for property to map
param naming image property to be made optional for Collections with only
one image-type property, but for now is required

*/

import edu.holycross.shot.citecoll.CollectionService
import edu.holycross.shot.citequery.Query
import edu.harvard.chs.cite.CiteUrn
import groovy.xml.MarkupBuilder

response.setContentType("text/xml; charset=UTF-8")
request.setCharacterEncoding("UTF-8")
response.setHeader( "Access-Control-Allow-Origin", "*")

String apiKey = "@apiKey@"


def getCapsFile = {
    File capsFile
    String capsFileName = "capabilities.xml"
    if (params['config']) {
        capsFileName = params['config']
    }
    try {
        capsFile = new File(context.getRealPath("/configs") + "/" + capsFileName )
        capsFile
    } catch (Exception e) {
        null
    }
}

boolean urnSyntaxOk(String urnStr) {
    try {
        CiteUrn urn = new CiteUrn (urnStr)
        return true
    } catch (Exception e) {
        return false
    }
}

def errorMsg =  { msg ->
    StringWriter writer = new StringWriter()
    MarkupBuilder xml = new MarkupBuilder(writer)
    xml.CiteError {
        errorCode("1")
        description("${msg}")
    }
    println writer.toString()    
}


def checkRequest() {
    // Must include a 'collection' urn,
    // an image urn, and a property to map.
    // Also an image property if more than one image
    // type proeprty in the collection
    def missing = []
    
    if (!params['coll']) {
        missing.add("'coll' : a Cite Collection URN")
    }

    if (!params['img']) {
        missing.add("'img' : a Cite URN for an image")
    }

    if (!params['map']) {
        missing.add("'map' : name of a property to map")
    }

    if (!params['imgProp']) {
        missing.add("'imgProp' : name of the property with image URNs (with RoIs)")
    }
    return missing
}

// SCRIPT:
// 1. Validate request form.
def check = checkRequest()

if ((check.size() > 0)) {
    errorMsg(check)
} else {
    // CHECK FOR caps file apram
    // 
    File caps = getCapsFile()
    if (! caps) { 
        errorMsg("Could not find capabilities file ${params['config']}")
    } else {
        CollectionService cs = new CollectionService(getCapsFile(), apiKey)
        Query q = new Query(cs)


        CiteUrn collUrn = new CiteUrn(params['coll'])
        CiteUrn imgUrn = new CiteUrn(params['img'])
        
        // should derive this by default if only one image property in Collection
        String imgProperty = params['imgProp']

        def agg = q.getVisualAggregate(collUrn, imgUrn, params['map'], imgProperty)
        
//        StringWriter writer = new StringWriter()
//        MarkupBuilder xml = new MarkupBuilder(writer)
        def bldr = new groovy.xml.StreamingMarkupBuilder().bind {
        //BAD:  xml.yieldUnescaped("<?xml-stylesheet type='text/xsl' href='xslt/imgmap.xsl'?>")
//        xml.imgmap(xmlns: "http://shot.holycross.edu/xmlns/citequery") {

                mkp.pi("xml-stylesheet":[type : "text/xsl", href : "xslt/imgmap.xsl"])

                imgmap(xmlns: "http://shot.holycross.edu/xmlns/citequery") {
            request {
                img ("${imgUrn}")
                coll ("${collUrn}")
                map("${params['map']}")
                imgProp("${imgProperty}")
            }
            reply {
                agg.each { pr ->
                    def val =  pr[0]
                    def roi = pr[1]
                    pair {
                        img ("${val}")
                        property ("${roi}")
                    }
                }
            }
        }
    }
//        println writer.toString()    
        println bldr
    }


}
